import pygame
import time
from Algorithms.MinimaxWithZobristHashingNoPruning import *
from Algorithms.MinimaxWithPruning import *
from Algorithms.PruningWithZobristHashing import *
from MovesGenerators.WhitesMovePlayer import *
from MovesGenerators.BlacksMovePlayer import *
from Visuals.CreatingFen import *
import pygame as p
from Evaluation.EvaluationFunction import *


begin_position = [
    [('R', -5), ('N', -3), ('L', -3), ('Q', -9), ('K', -100), ('L', -3), ('N', -3), ('R', -5)],
    [('P', -1), ('P', -1), ('P', -1), ('P', -1), ('P', -1), ('P', -1), ('P', -1), ('P', -1)],
    [('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0)],
    [('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0)],
    [('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0)],
    [('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0), ('B', 0)],
    [('P', 1), ('P', 1), ('P', 1), ('P', 1), ('P', 1), ('P', 1), ('P', 1), ('P', 1)],
    [('R', 5), ('N', 3), ('L', 3), ('Q', 9), ('K', 100), ('L', 3), ('N', 3), ('R', 5)]
]

# Chess board in letters
chess_board_letters = [["a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8"],
                       ["a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7"],
                       ["a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6"],
                       ["a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5"],
                       ["a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4"],
                       ["a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3"],
                       ["a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2"],
                       ["a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1"]]

counts = 0

# defining the chessboard, and white begins, so the color of the kings player is white
chessboard = board(begin_position, 1)

# the seed chosen for generating the Zobrist keys
chessboard.zobrist_board = [[{('R', -5): 62294846794, ('N', -3): 47141560307, ('L', -3): 86685321409, ('Q', -9): 4144846587,
                        ('K', -100): 76052737133, ('R', 5): 10953356879, ('N', 3): 60486785367, ('L', 3): 1980357434,
                        ('Q', 9): 8450493021, ('K', 100): 38592401746, ('P', 1): 42663224362, ('P', -1): 94287027888},
                       {('R', -5): 15521535309, ('N', -3): 90958761168, ('L', -3): 97628718472, ('Q', -9): 7399133406,
                        ('K', -100): 55584995486, ('R', 5): 45124285277, ('N', 3): 36065334406, ('L', 3): 25588276135,
                        ('Q', 9): 61646190868, ('K', 100): 56583565830, ('P', 1): 77414028335, ('P', -1): 39347842564},
                       {('R', -5): 80624840753, ('N', -3): 68051426070, ('L', -3): 99574725361, ('Q', -9): 43005601502,
                        ('K', -100): 86885832910, ('R', 5): 35310421895, ('N', 3): 25065757643, ('L', 3): 52571556381,
                        ('Q', 9): 29472351022, ('K', 100): 96514596782, ('P', 1): 4922541691, ('P', -1): 85488198209},
                       {('R', -5): 42248576224, ('N', -3): 8811339985, ('L', -3): 96342264581, ('Q', -9): 90398732668,
                        ('K', -100): 79445360210, ('R', 5): 2062142148, ('N', 3): 64987172961, ('L', 3): 9999740783,
                        ('Q', 9): 81528291844, ('K', 100): 21420633964, ('P', 1): 77995557897, ('P', -1): 6594267838},
                       {('R', -5): 25393970738, ('N', -3): 47376247182, ('L', -3): 27401777871, ('Q', -9): 46345365797,
                        ('K', -100): 59522842432, ('R', 5): 47726483147, ('N', 3): 62823850247, ('L', 3): 65281979799,
                        ('Q', 9): 63452581864, ('K', 100): 72635285510, ('P', 1): 39129543328, ('P', -1): 74137193454},
                       {('R', -5): 64905799718, ('N', -3): 73938660650, ('L', -3): 32827986478, ('Q', -9): 98415972763,
                        ('K', -100): 31590821923, ('R', 5): 33595566031, ('N', 3): 12949123878, ('L', 3): 61366893937,
                        ('Q', 9): 70294621357, ('K', 100): 67750547668, ('P', 1): 17088619074, ('P', -1): 57576071573},
                       {('R', -5): 48931296235, ('N', -3): 69264105061, ('L', -3): 2784245166, ('Q', -9): 71198319852,
                        ('K', -100): 88071447145, ('R', 5): 78540957053, ('N', 3): 78279195697, ('L', 3): 29308523667,
                        ('Q', 9): 47264510093, ('K', 100): 44970093841, ('P', 1): 16266880473, ('P', -1): 51272256763},
                       {('R', -5): 37953894488, ('N', -3): 26800269994, ('L', -3): 38374536118, ('Q', -9): 16596470849,
                        ('K', -100): 46490703767, ('R', 5): 34363480207, ('N', 3): 74095788623, ('L', 3): 60290703282,
                        ('Q', 9): 64876563825, ('K', 100): 76759992454, ('P', 1): 58693280176, ('P', -1): 64254605360}],
                      [
                          {('R', -5): 70963270806, ('N', -3): 50268964977, ('L', -3): 11989017546,
                           ('Q', -9): 51141241883,
                           ('K', -100): 8845829457, ('R', 5): 24558925626, ('N', 3): 17959675340, ('L', 3): 45045119731,
                           ('Q', 9): 71988052899, ('K', 100): 20636884669, ('P', 1): 60493746390,
                           ('P', -1): 54593251201},
                          {('R', -5): 9494819725, ('N', -3): 21552652135, ('L', -3): 35585612584,
                           ('Q', -9): 35346954253,
                           ('K', -100): 79577826870, ('R', 5): 30173569063, ('N', 3): 40596755873,
                           ('L', 3): 61549912602,
                           ('Q', 9): 77505529070, ('K', 100): 76418408930, ('P', 1): 64204229961,
                           ('P', -1): 46834322368},
                          {('R', -5): 85323793110, ('N', -3): 11269275559, ('L', -3): 27273340179,
                           ('Q', -9): 57220074363,
                           ('K', -100): 99861792570, ('R', 5): 38759360834, ('N', 3): 55057755303,
                           ('L', 3): 24947721499,
                           ('Q', 9): 39695987863, ('K', 100): 21430480108, ('P', 1): 91707525741,
                           ('P', -1): 90592089293},
                          {('R', -5): 42836652064, ('N', -3): 9399772797, ('L', -3): 95559283774,
                           ('Q', -9): 64778447346,
                           ('K', -100): 96808640236, ('R', 5): 27255516913, ('N', 3): 62035162787,
                           ('L', 3): 71303213381,
                           ('Q', 9): 92729863320, ('K', 100): 78201299717, ('P', 1): 94752746736,
                           ('P', -1): 17342973330},
                          {('R', -5): 33549330115, ('N', -3): 94269977003, ('L', -3): 28388794553,
                           ('Q', -9): 67605988925,
                           ('K', -100): 93935330665, ('R', 5): 72649306912, ('N', 3): 17557545629,
                           ('L', 3): 96963233964,
                           ('Q', 9): 79634870229, ('K', 100): 60292868209, ('P', 1): 24454661057,
                           ('P', -1): 77786302153},
                          {('R', -5): 62013305710, ('N', -3): 60892569308, ('L', -3): 24803508209,
                           ('Q', -9): 10077702380,
                           ('K', -100): 60519525830, ('R', 5): 2496736558, ('N', 3): 2126862086, ('L', 3): 42311490875,
                           ('Q', 9): 38132899032, ('K', 100): 93372149456, ('P', 1): 83221607387,
                           ('P', -1): 66689281434},
                          {('R', -5): 77844402812, ('N', -3): 80576298785, ('L', -3): 21874838923,
                           ('Q', -9): 42760586859,
                           ('K', -100): 99289362619, ('R', 5): 76108232582, ('N', 3): 43269893361,
                           ('L', 3): 21298698834,
                           ('Q', 9): 81308484659, ('K', 100): 64593524612, ('P', 1): 10405045926,
                           ('P', -1): 44049869426},
                          {('R', -5): 92834480952, ('N', -3): 8779958944, ('L', -3): 30987248641,
                           ('Q', -9): 89413181598,
                           ('K', -100): 62707164573, ('R', 5): 79105714690, ('N', 3): 92999739262,
                           ('L', 3): 25501814801,
                           ('Q', 9): 48313518486, ('K', 100): 75854169797, ('P', 1): 35384709396,
                           ('P', -1): 25212932016}], [
                          {('R', -5): 63656631604, ('N', -3): 75456550900, ('L', -3): 23493631105,
                           ('Q', -9): 76694448641,
                           ('K', -100): 1960875719, ('R', 5): 10763496079, ('N', 3): 23628576451, ('L', 3): 10355576745,
                           ('Q', 9): 53052635083, ('K', 100): 35559216210, ('P', 1): 11655246326,
                           ('P', -1): 27866635537},
                          {('R', -5): 44573574834, ('N', -3): 88651761646, ('L', -3): 53774256539,
                           ('Q', -9): 34379611173,
                           ('K', -100): 97910406791, ('R', 5): 98583695450, ('N', 3): 63085954920,
                           ('L', 3): 37387004065,
                           ('Q', 9): 54123372600, ('K', 100): 5817290105, ('P', 1): 7590584183, ('P', -1): 56552428841},
                          {('R', -5): 79366439360, ('N', -3): 68565070201, ('L', -3): 57049673391,
                           ('Q', -9): 30655345289,
                           ('K', -100): 31387695830, ('R', 5): 64763049173, ('N', 3): 53278936483,
                           ('L', 3): 94844223842,
                           ('Q', 9): 60900028994, ('K', 100): 8438245824, ('P', 1): 94977964048,
                           ('P', -1): 62682082925},
                          {('R', -5): 15809174716, ('N', -3): 4694151050, ('L', -3): 9935639033, ('Q', -9): 74871998400,
                           ('K', -100): 13939723051, ('R', 5): 3305637926, ('N', 3): 2875529194, ('L', 3): 25728535906,
                           ('Q', 9): 10700733983, ('K', 100): 40345705132, ('P', 1): 57563028500,
                           ('P', -1): 81589448762},
                          {('R', -5): 39069412775, ('N', -3): 63062095860, ('L', -3): 79201817846,
                           ('Q', -9): 13136578627,
                           ('K', -100): 26902645777, ('R', 5): 76655558784, ('N', 3): 6521696795, ('L', 3): 89877247415,
                           ('Q', 9): 66729891949, ('K', 100): 52090026843, ('P', 1): 30236567128,
                           ('P', -1): 66937598491},
                          {('R', -5): 3701231153, ('N', -3): 33236715447, ('L', -3): 25629910666, ('Q', -9): 4699344397,
                           ('K', -100): 65202098730, ('R', 5): 76835101330, ('N', 3): 80728447838,
                           ('L', 3): 92764089654,
                           ('Q', 9): 48302169792, ('K', 100): 26338684990, ('P', 1): 75405336342,
                           ('P', -1): 59689990620},
                          {('R', -5): 46801172702, ('N', -3): 96836852051, ('L', -3): 53859301459,
                           ('Q', -9): 76503071594,
                           ('K', -100): 46003790196, ('R', 5): 48231626487, ('N', 3): 13622092942,
                           ('L', 3): 36617459305,
                           ('Q', 9): 47729770755, ('K', 100): 38235375462, ('P', 1): 85212497951,
                           ('P', -1): 51749894364},
                          {('R', -5): 59388305912, ('N', -3): 78492079246, ('L', -3): 61761943320,
                           ('Q', -9): 38424061283,
                           ('K', -100): 91240866833, ('R', 5): 5982579642, ('N', 3): 97947626570, ('L', 3): 24562896780,
                           ('Q', 9): 50487166834, ('K', 100): 65244602495, ('P', 1): 18681057708,
                           ('P', -1): 95443527132}], [
                          {('R', -5): 58057999831, ('N', -3): 57551998858, ('L', -3): 86011514099,
                           ('Q', -9): 2730192921,
                           ('K', -100): 69758964173, ('R', 5): 33471541961, ('N', 3): 79339539967,
                           ('L', 3): 99617471159,
                           ('Q', 9): 26128135234, ('K', 100): 48278358865, ('P', 1): 92621037489,
                           ('P', -1): 35474336668},
                          {('R', -5): 54373457974, ('N', -3): 63813418123, ('L', -3): 77704596992,
                           ('Q', -9): 63314569715,
                           ('K', -100): 31410758975, ('R', 5): 21693597223, ('N', 3): 96256079384,
                           ('L', 3): 62158374962,
                           ('Q', 9): 54145114585, ('K', 100): 63748242349, ('P', 1): 47435337925, ('P', -1): 197752239},
                          {('R', -5): 50736090604, ('N', -3): 92122465315, ('L', -3): 8056667110,
                           ('Q', -9): 54051551716,
                           ('K', -100): 58212420146, ('R', 5): 97314798554, ('N', 3): 37931939122,
                           ('L', 3): 40423484603,
                           ('Q', 9): 98816166502, ('K', 100): 46633398899, ('P', 1): 31306253716,
                           ('P', -1): 38703149321},
                          {('R', -5): 44853903100, ('N', -3): 7131882616, ('L', -3): 22410268631,
                           ('Q', -9): 65656262342,
                           ('K', -100): 36903414171, ('R', 5): 39220244692, ('N', 3): 55776820323,
                           ('L', 3): 60533094652,
                           ('Q', 9): 87314939899, ('K', 100): 82347961126, ('P', 1): 70699149320, ('P', -1): 84655300},
                          {('R', -5): 70041881106, ('N', -3): 88048862111, ('L', -3): 34149919660,
                           ('Q', -9): 13161897268,
                           ('K', -100): 98643264666, ('R', 5): 59576334712, ('N', 3): 17897846063,
                           ('L', 3): 30181759674,
                           ('Q', 9): 7141327221, ('K', 100): 3182551604, ('P', 1): 65745351769, ('P', -1): 2755945132},
                          {('R', -5): 72627878580, ('N', -3): 18109629114, ('L', -3): 85316842761,
                           ('Q', -9): 99009093532,
                           ('K', -100): 84149773352, ('R', 5): 15869408651, ('N', 3): 55586149578, ('L', 3): 3671925496,
                           ('Q', 9): 97524065271, ('K', 100): 13279654758, ('P', 1): 84824816143,
                           ('P', -1): 8792995157},
                          {('R', -5): 13907571139, ('N', -3): 50268075444, ('L', -3): 48650908943,
                           ('Q', -9): 76914913207,
                           ('K', -100): 85476379204, ('R', 5): 66821870810, ('N', 3): 64538253056,
                           ('L', 3): 43551414530,
                           ('Q', 9): 95223516866, ('K', 100): 26731758909, ('P', 1): 82444874687,
                           ('P', -1): 5083702991},
                          {('R', -5): 90770465150, ('N', -3): 21692615320, ('L', -3): 70851462822,
                           ('Q', -9): 90426301363,
                           ('K', -100): 28301017606, ('R', 5): 172034609, ('N', 3): 95067232224, ('L', 3): 19906414929,
                           ('Q', 9): 34852588035, ('K', 100): 60233711161, ('P', 1): 85675434668,
                           ('P', -1): 80109679061}], [
                          {('R', -5): 75097092871, ('N', -3): 6767240276, ('L', -3): 96205693734,
                           ('Q', -9): 73186593966,
                           ('K', -100): 60189383029, ('R', 5): 59518930124, ('N', 3): 82112499503,
                           ('L', 3): 58454846479,
                           ('Q', 9): 8803025347, ('K', 100): 8807280675, ('P', 1): 79328987364, ('P', -1): 52116450035},
                          {('R', -5): 94292412771, ('N', -3): 75489305895, ('L', -3): 67695170181,
                           ('Q', -9): 96666913648,
                           ('K', -100): 71240626435, ('R', 5): 65737453887, ('N', 3): 65583372850,
                           ('L', 3): 53735672894,
                           ('Q', 9): 92176645788, ('K', 100): 89560282853, ('P', 1): 83947326148,
                           ('P', -1): 75951286348},
                          {('R', -5): 29460602599, ('N', -3): 92525679262, ('L', -3): 88545419229,
                           ('Q', -9): 86099386973,
                           ('K', -100): 65271704009, ('R', 5): 32417614024, ('N', 3): 22739631577,
                           ('L', 3): 19027745659,
                           ('Q', 9): 94795463636, ('K', 100): 3492493353, ('P', 1): 4631756465, ('P', -1): 996397378},
                          {('R', -5): 75964098413, ('N', -3): 67861219622, ('L', -3): 41828469638,
                           ('Q', -9): 66697927145,
                           ('K', -100): 81344416045, ('R', 5): 97693166905, ('N', 3): 29786355572,
                           ('L', 3): 25055684533,
                           ('Q', 9): 59352002177, ('K', 100): 53605793988, ('P', 1): 32571676119,
                           ('P', -1): 90824257071},
                          {('R', -5): 71796771881, ('N', -3): 26105704499, ('L', -3): 83321009576,
                           ('Q', -9): 97662690874,
                           ('K', -100): 92228113438, ('R', 5): 91017689129, ('N', 3): 89482055420,
                           ('L', 3): 64007628717,
                           ('Q', 9): 79828118520, ('K', 100): 83674930762, ('P', 1): 98009675018,
                           ('P', -1): 67277394116},
                          {('R', -5): 54488527171, ('N', -3): 60761642544, ('L', -3): 87404580634,
                           ('Q', -9): 59841065824,
                           ('K', -100): 18230650340, ('R', 5): 26729473364, ('N', 3): 24464150548,
                           ('L', 3): 49866460013,
                           ('Q', 9): 51897460162, ('K', 100): 13055062794, ('P', 1): 10127576075,
                           ('P', -1): 34971083144},
                          {('R', -5): 98518897477, ('N', -3): 2553638964, ('L', -3): 49788960846,
                           ('Q', -9): 92546493219,
                           ('K', -100): 58825232623, ('R', 5): 59326599466, ('N', 3): 99202900769,
                           ('L', 3): 63263146615,
                           ('Q', 9): 33076249608, ('K', 100): 36864353946, ('P', 1): 95172287801,
                           ('P', -1): 80968196567},
                          {('R', -5): 40603942491, ('N', -3): 57999707651, ('L', -3): 24450658489,
                           ('Q', -9): 8999594079,
                           ('K', -100): 44721185390, ('R', 5): 5351184015, ('N', 3): 43554272372, ('L', 3): 85140442199,
                           ('Q', 9): 47917560395, ('K', 100): 6346380997, ('P', 1): 52079414485,
                           ('P', -1): 22257319302}], [
                          {('R', -5): 13628091733, ('N', -3): 74591812126, ('L', -3): 32920612808,
                           ('Q', -9): 58274696701,
                           ('K', -100): 27314578015, ('R', 5): 19784823240, ('N', 3): 36377316673, ('L', 3): 7726636307,
                           ('Q', 9): 3665864187, ('K', 100): 24893294283, ('P', 1): 92074056315,
                           ('P', -1): 85229465377},
                          {('R', -5): 10431918936, ('N', -3): 99910279055, ('L', -3): 42579184152,
                           ('Q', -9): 69064535856,
                           ('K', -100): 53582630851, ('R', 5): 36600601597, ('N', 3): 12783190928,
                           ('L', 3): 55017737124,
                           ('Q', 9): 98124121748, ('K', 100): 50509368259, ('P', 1): 48875537358,
                           ('P', -1): 17561374514},
                          {('R', -5): 26729211940, ('N', -3): 39189341922, ('L', -3): 71627733091,
                           ('Q', -9): 63435662968,
                           ('K', -100): 88770936859, ('R', 5): 15040750142, ('N', 3): 41933146916,
                           ('L', 3): 66193567975,
                           ('Q', 9): 68120862418, ('K', 100): 36185641546, ('P', 1): 7135022568,
                           ('P', -1): 13916759677},
                          {('R', -5): 32487519701, ('N', -3): 61932266004, ('L', -3): 18977879006,
                           ('Q', -9): 41081120867,
                           ('K', -100): 78321599626, ('R', 5): 35525046680, ('N', 3): 6560528722, ('L', 3): 687286309,
                           ('Q', 9): 25178599582, ('K', 100): 28959699910, ('P', 1): 18479954949,
                           ('P', -1): 69294248003},
                          {('R', -5): 61630457344, ('N', -3): 98543201999, ('L', -3): 24781231737,
                           ('Q', -9): 58836314886,
                           ('K', -100): 93037528017, ('R', 5): 45213206898, ('N', 3): 4509481940, ('L', 3): 2719428525,
                           ('Q', 9): 23083898296, ('K', 100): 37999380660, ('P', 1): 62827688362,
                           ('P', -1): 82098537002},
                          {('R', -5): 60184269805, ('N', -3): 48670538536, ('L', -3): 28503883950,
                           ('Q', -9): 82622679501,
                           ('K', -100): 47504615001, ('R', 5): 18047707407, ('N', 3): 11743948863,
                           ('L', 3): 13155609485,
                           ('Q', 9): 5599590724, ('K', 100): 62219871797, ('P', 1): 25156510502,
                           ('P', -1): 92539732989},
                          {('R', -5): 78240405721, ('N', -3): 74584369657, ('L', -3): 48861422135,
                           ('Q', -9): 1177926691,
                           ('K', -100): 79939415163, ('R', 5): 83188382457, ('N', 3): 34104609057,
                           ('L', 3): 13872781445,
                           ('Q', 9): 86769823727, ('K', 100): 28601514552, ('P', 1): 71801757965,
                           ('P', -1): 53841158600},
                          {('R', -5): 62076429055, ('N', -3): 12086156922, ('L', -3): 57336616513,
                           ('Q', -9): 58211188422,
                           ('K', -100): 72191462019, ('R', 5): 75431867033, ('N', 3): 26681842815,
                           ('L', 3): 90519671528,
                           ('Q', 9): 29267147385, ('K', 100): 54828824565, ('P', 1): 55416623812,
                           ('P', -1): 31272177152}], [
                          {('R', -5): 83308106492, ('N', -3): 15866019367, ('L', -3): 12744079397,
                           ('Q', -9): 3767837105,
                           ('K', -100): 56029418000, ('R', 5): 98133203814, ('N', 3): 48307490612,
                           ('L', 3): 42284524865,
                           ('Q', 9): 48677572435, ('K', 100): 14012851038, ('P', 1): 15651543050,
                           ('P', -1): 56817349101},
                          {('R', -5): 17234692059, ('N', -3): 68823599741, ('L', -3): 94117714571,
                           ('Q', -9): 78023823027,
                           ('K', -100): 92123542755, ('R', 5): 54602013059, ('N', 3): 54343961956,
                           ('L', 3): 33012484065,
                           ('Q', 9): 82566446259, ('K', 100): 58682065849, ('P', 1): 18269619500,
                           ('P', -1): 74245046298},
                          {('R', -5): 94115880219, ('N', -3): 97735199296, ('L', -3): 59618827502,
                           ('Q', -9): 58141083943,
                           ('K', -100): 29626097245, ('R', 5): 2174878476, ('N', 3): 62775164163, ('L', 3): 23136620485,
                           ('Q', 9): 17493045459, ('K', 100): 87036163308, ('P', 1): 76099494931,
                           ('P', -1): 70300748349},
                          {('R', -5): 45631524483, ('N', -3): 88602753345, ('L', -3): 54159544124,
                           ('Q', -9): 76723101695,
                           ('K', -100): 91261638798, ('R', 5): 82316882611, ('N', 3): 14859126121, ('L', 3): 3505516676,
                           ('Q', 9): 81498316284, ('K', 100): 33641910368, ('P', 1): 24805852840,
                           ('P', -1): 67248581177},
                          {('R', -5): 51313800832, ('N', -3): 61104664562, ('L', -3): 26972012163,
                           ('Q', -9): 64747999958,
                           ('K', -100): 77295478981, ('R', 5): 55895511472, ('N', 3): 23025723523,
                           ('L', 3): 45218031326,
                           ('Q', 9): 15404871251, ('K', 100): 95514599351, ('P', 1): 7162576951,
                           ('P', -1): 54766410885},
                          {('R', -5): 39651812562, ('N', -3): 73459954632, ('L', -3): 45986584995,
                           ('Q', -9): 60859839083,
                           ('K', -100): 8639751207, ('R', 5): 55720575327, ('N', 3): 83899566446, ('L', 3): 66793977965,
                           ('Q', 9): 63626226776, ('K', 100): 32595712146, ('P', 1): 51895889386,
                           ('P', -1): 78390509112},
                          {('R', -5): 82572793403, ('N', -3): 52815373173, ('L', -3): 41150308877,
                           ('Q', -9): 18506309932,
                           ('K', -100): 97787253922, ('R', 5): 59471015428, ('N', 3): 1932179820, ('L', 3): 77400090439,
                           ('Q', 9): 96045878654, ('K', 100): 27569509698, ('P', 1): 59860353686,
                           ('P', -1): 18615877674},
                          {('R', -5): 49963428394, ('N', -3): 43310146994, ('L', -3): 22287677236,
                           ('Q', -9): 98850132846,
                           ('K', -100): 95699273384, ('R', 5): 36296922551, ('N', 3): 83423086640,
                           ('L', 3): 48125178508,
                           ('Q', 9): 15315873273, ('K', 100): 52814185413, ('P', 1): 89142421964,
                           ('P', -1): 79268910547}], [
                          {('R', -5): 47397379208, ('N', -3): 1148054695, ('L', -3): 80448520373,
                           ('Q', -9): 79489271131,
                           ('K', -100): 74904704994, ('R', 5): 88714859517, ('N', 3): 45098177943,
                           ('L', 3): 57000268911,
                           ('Q', 9): 43189681826, ('K', 100): 58436456476, ('P', 1): 22034368531,
                           ('P', -1): 41200175236},
                          {('R', -5): 10647812015, ('N', -3): 51323810526, ('L', -3): 58665724179,
                           ('Q', -9): 51874116640,
                           ('K', -100): 82771978689, ('R', 5): 39113119559, ('N', 3): 27328941086,
                           ('L', 3): 42941000496,
                           ('Q', 9): 78826232489, ('K', 100): 78949536833, ('P', 1): 3514874926,
                           ('P', -1): 61681980645},
                          {('R', -5): 50362350113, ('N', -3): 63189107625, ('L', -3): 24704287138,
                           ('Q', -9): 30414855739,
                           ('K', -100): 60623956969, ('R', 5): 23291205853, ('N', 3): 22553460968,
                           ('L', 3): 72773637374,
                           ('Q', 9): 96255705396, ('K', 100): 64323608687, ('P', 1): 17325754324,
                           ('P', -1): 63420736907},
                          {('R', -5): 68461958246, ('N', -3): 4024803138, ('L', -3): 68679352798,
                           ('Q', -9): 86030489575,
                           ('K', -100): 40040940105, ('R', 5): 18943523533, ('N', 3): 33110759991,
                           ('L', 3): 59633274336,
                           ('Q', 9): 18649405596, ('K', 100): 19701638569, ('P', 1): 15056337338,
                           ('P', -1): 66948815739},
                          {('R', -5): 68572465046, ('N', -3): 83699744996, ('L', -3): 76701194256,
                           ('Q', -9): 6776524908,
                           ('K', -100): 28857426324, ('R', 5): 64265834044, ('N', 3): 77152824184,
                           ('L', 3): 26993102377,
                           ('Q', 9): 29988600645, ('K', 100): 79748808665, ('P', 1): 59358830317,
                           ('P', -1): 84378239709},
                          {('R', -5): 13057368276, ('N', -3): 95583774523, ('L', -3): 67457579678,
                           ('Q', -9): 73826185862,
                           ('K', -100): 12094326556, ('R', 5): 8995741346, ('N', 3): 15937440520, ('L', 3): 23801329565,
                           ('Q', 9): 90245423061, ('K', 100): 60572592552, ('P', 1): 82101410807,
                           ('P', -1): 70946878501},
                          {('R', -5): 10124176621, ('N', -3): 5789000214, ('L', -3): 26202637485,
                           ('Q', -9): 18402760313,
                           ('K', -100): 91196660460, ('R', 5): 32179872446, ('N', 3): 15343577230,
                           ('L', 3): 90366272316,
                           ('Q', 9): 27800232155, ('K', 100): 21046532453, ('P', 1): 95210781399,
                           ('P', -1): 53462935559},
                          {('R', -5): 68262123028, ('N', -3): 525348301, ('L', -3): 35214884383, ('Q', -9): 20316258524,
                           ('K', -100): 29391319246, ('R', 5): 55613695857, ('N', 3): 41968212935,
                           ('L', 3): 28557706883,
                           ('Q', 9): 25568488207, ('K', 100): 57078654243, ('P', 1): 58308247553,
                           ('P', -1): 99471913216}]]

chessboard.zobrist_en_passant = {'a': 26227665473, 'b': 70754318280, 'c': 58798720471, 'd': 99707016448, 'e': 32740487617,
                           'f': 11220135525,
                           'g': 83479792052, 'h': 19551458537}
chessboard.zobrist_castle = {'white_can_castle_short': 91060479097, 'white_can_castle_long': 50698464158,
                       'black_can_castle_short': 96065658156, 'black_can_castle_long': 78064973854}
chessboard.possible_moves()

# defining the chess window
WIDTH = HEIGHT = 512
DIMENSION = 8
SQ_SIZE = HEIGHT // DIMENSION  # square size
MAX_FPS = 24
IMAGES = {}

# loading the images
def load_images():
    pieces = {("L", -3): 'bB', ("K", -100): 'bK', ("N", -3): 'bN', ("P", -1): 'bp',
              ("Q", -9): 'bQ', ("R", -5): 'bR', ("L", 3): 'wB', ("K", 100): 'wK',
              ("N", 3): 'wN', ("P", 1): 'wp', ("Q", 9): 'wQ', ("R", 5): 'wR'}
    for piece in pieces:
        IMAGES[piece] = p.transform.scale(p.image.load("Images/" + pieces[piece] + ".png"), (SQ_SIZE, SQ_SIZE))

def main():

    p.init()
    screen = p.display.set_mode((WIDTH, HEIGHT))
    clock = p.time.Clock()
    screen.fill(p.Color("white"))

    # initializing the variables
    running_menu = True
    running_multiplayer = False
    running_bot = False
    running_bot_black = False
    running_bot_white = False
    promoting_white = False
    promoting = False
    sqSelected = ()  # first selected square
    playerClicks = []
    piece = False
    promoting_black = False

    # menu to ask what the persons wants to do: BOT(white, black) or multiplayer
    while running_menu:
        draw_menu(screen)
        for e in p.event.get():
            if e.type == p.QUIT:
                input('the game ended!')

            elif e.type == pygame.MOUSEBUTTONDOWN:
                location = p.mouse.get_pos()  # (x,y) location of the mouse
                col = location[0] // 256
                row = location[1] // 316
                if row == 0:
                    break
                else:
                    if col == 0:
                        running_bot = True
                        running_menu = False
                    else:
                        running_multiplayer = True
                        running_menu = False
        clock.tick(MAX_FPS)
        p.display.flip()

    # asking which color if person wants to play against bot
    while running_bot:
        choose_player_color(screen)
        for e in p.event.get():
            if e.type == p.QUIT:
                input('the game ended!')

            elif e.type == pygame.MOUSEBUTTONDOWN:
                location = p.mouse.get_pos()  # (x,y) location of the mouse
                col = location[0] // 256
                # if chosen for playing black
                if col == 0:
                    running_bot_black = True
                    running_bot = False
                else:
                    running_bot_white = True
                    running_bot = False
        clock.tick(MAX_FPS)
        p.display.flip()




    #Loading the images
    load_images()

    # If engine is playing black
    while running_bot_black:
        # There is initially no possiblity to promote
        if not promoting:
            draw_game_state(screen, making_fen(chessboard.current_chess_board))
        for e in p.event.get():
            if e.type == p.QUIT:
                input('the game ended!')
                running_bot_black = True

            # considering case where player wants to promote
            elif e.type == pygame.MOUSEBUTTONDOWN and promoting:
                choosing_promotion_piece_black(screen, playerClicks[1][1])
                location = p.mouse.get_pos()  # (x,y) location of the mouse
                col = location[0] // SQ_SIZE
                row = location[1] // SQ_SIZE
                if col == playerClicks[1][1] and row in {0, 1, 2, 3}:
                    # B represents the bishop!
                    row_to_piece = {0: "Q", 1: "R", 2: "B", 3: "N"}
                    piece = row_to_piece[row]
                    # Resetting the promoting
                    promoting = False
                    if white_move_player(playerClicks[0], playerClicks[1], chessboard, piece):
                        draw_pieces_by_fen(screen, making_fen(chessboard.current_chess_board))
                        chessboard.color = -1
                        sqSelected = ()
                        playerClicks = []
                        piece = False
                    else:
                        sqSelected = ()
                        playerClicks = []
                        print('you have played an illegal move, please try again')
                else:
                    break

            elif e.type == pygame.MOUSEBUTTONDOWN and chessboard.color == 1:
                location = p.mouse.get_pos()  # (x,y) location of the mouse
                col = location[0] // SQ_SIZE
                row = location[1] // SQ_SIZE
                highlight_square(screen, col, row)

                # If player presses twice on same square
                if sqSelected == (row, col):
                    sqSelected = ()
                    playerClicks = []
                    break
                else:
                    sqSelected = (row, col)
                    playerClicks.append(sqSelected)

                    # Only checking if move is legal after twice is clicked.
                    if len(playerClicks) == 2:
                        if playerClicks[1][0] == 0 and playerClicks[0][0] == 1 and not promoting:
                            if chessboard.current_chess_board[playerClicks[0][0]][playerClicks[0][1]] == ("P", 1):
                                choosing_promotion_piece_black(screen, playerClicks[1][1])
                                promoting = True
                                break
                        if white_move_player(playerClicks[0], playerClicks[1], chessboard, piece):
                            draw_game_state(screen, making_fen(chessboard.current_chess_board))
                            chessboard.color = -1
                            sqSelected = ()
                            playerClicks = []
                            piece = False
                        else:
                            sqSelected = ()
                            playerClicks = []
                            print('you have played an illegal move, please try again')

            # Game end if mate or stalemate happens
            elif chessboard.mate:
                draw_game_state(screen, making_fen(chessboard.current_chess_board))
                input('Checkmate!')
                running_bot_black = False
            elif chessboard.stalemate:
                draw_game_state(screen, making_fen(chessboard.current_chess_board))
                input('Stalemate!')
                running_bot_black = False

            elif chessboard.color == -1:
                start = time.perf_counter()
                chessboard.transposition_table = {}
                chessboard.counting = 0
                """
                YOU CAN CHANGE THE FOLLOWING BY YOURSELF TO FOLLOWING SETTINGS:
                    -minimax_with_zobrist_hashing_no_pruning(chessboard, depth, maximizingPlayer): this is minimax, with NO
                    PRUNING, but WITH zobrist hashing
                    -minimax_with_pruning(chessboard, depth, -float('inf'), float('inf'), maximizingPlayer):
                    This is the famous alpha-beta-pruning, but WITHOUT the zobrist hashing
                    -minimax_with_zobrist_hashing_and_pruning(chessboard, depth, -float('inf'), float('inf'), maximizingPlayer):
                    this is minimax, PRUNED and WITH the zobrist hashing

                    WARNING: the higher the depth, the better the engine will play, but the longer it takes to generate
                    a move!
                """
                eval, move_black =minimax_with_zobrist_hashing_and_pruning(chessboard, 2, -float('inf'), float('inf'), maximizingPlayer = False)
                # Switching to the endgame:
                if eval < -3:
                    if len(chessboard.cells_having_pieces_white) <= 8:
                        chessboard.middlegame = False
                        chessboard.endgame = True

                elif len(chessboard.cells_having_pieces_white) <= len(chessboard.cells_having_pieces_black) < 10:
                    chessboard.middlegame = False
                    chessboard.endgame = True

                elif len(chessboard.cells_having_pieces_black) < 6 and eval < 1:
                    chessboard.middlegame = False
                    chessboard.endgame = True

                end = time.perf_counter()
                print("---------------------------------")
                print("Time to make move:", end-start)
                print("ZOBRIST HASHING OF CURRENT POSITION: ", zobrist_hash(chessboard))
                print("NUMBER OF TRANSPOSITIONS FOUND:", chessboard.counting)
                black_turn(move_black, chessboard)
                print("EVALUATION OF POSITION:", eval_board(chessboard))
                draw_game_state(screen, making_fen(chessboard.current_chess_board))

        clock.tick(MAX_FPS)
        p.display.flip()


    # Bot is playing white
    while running_bot_white:
        # there is initially no possiblity to promote
        if not promoting:
            draw_game_state(screen, making_fen(chessboard.current_chess_board)[::-1])
        for e in p.event.get():
            if e.type == p.QUIT:
                input('the game ended!')
                running_bot_white = True

            elif e.type == pygame.MOUSEBUTTONDOWN and promoting:
                choosing_promotion_piece_white(screen, 7-playerClicks[1][1])
                location = p.mouse.get_pos()  # (x,y) location of the mouse
                col = 7-location[0] // SQ_SIZE
                row = 7-location[1] // SQ_SIZE
                if col == playerClicks[1][1] and row in {7, 6, 5, 4}:
                    ## B represents the bishop
                    row_to_piece = {7: "Q", 6: "R", 5: "B", 4: "N"}
                    piece = row_to_piece[row]
                    promoting = False
                    if black_move_player(playerClicks[0], playerClicks[1], chessboard, piece):
                        draw_pieces_by_fen(screen, making_fen(chessboard.current_chess_board))
                        chessboard.color = 1
                        sqSelected = ()
                        playerClicks = []
                        piece = False
                    else:
                        sqSelected = ()
                        playerClicks = []
                        print('you have played an illegal move, please try again')

                else:
                    break

            elif e.type == pygame.MOUSEBUTTONDOWN and chessboard.color == -1:
                location = p.mouse.get_pos()  # (x,y) location of the mouse
                # to make the correct location, we need to readjust
                col = 7-location[0] // SQ_SIZE
                row = 7-location[1] // SQ_SIZE

                if sqSelected == (row, col):
                    sqSelected = ()
                    playerClicks = []
                    break
                else:
                    sqSelected = (row, col)
                    playerClicks.append(sqSelected)
                    if len(playerClicks) == 2:
                        if playerClicks[1][0] == 7 and playerClicks[0][0] == 6 and not promoting:
                            if chessboard.current_chess_board[playerClicks[0][0]][playerClicks[0][1]] == ("P", -1):
                                choosing_promotion_piece_white(screen, 7 - playerClicks[1][1])
                                promoting = True
                                break
                        if black_move_player(playerClicks[0], playerClicks[1], chessboard, piece):
                            draw_game_state(screen, making_fen(chessboard.current_chess_board)[::-1])
                            chessboard.color = 1
                            sqSelected = ()
                            playerClicks = []
                            piece = False
                        else:
                            sqSelected = ()
                            playerClicks = []
                            print('you have played an illegal move, please try again')

            # Game ends if king is checkmated or stalemated
            elif chessboard.mate:
                # using [::-1] to turn the created fen, as to switch the board for the player too
                draw_game_state(screen, making_fen(chessboard.current_chess_board)[::-1])
                input('Checkmate!')
                running_bot_white = False
            elif chessboard.stalemate:
                draw_game_state(screen, making_fen(chessboard.current_chess_board)[::-1])
                input('Stalemate!')
                running_bot_white = False

            elif chessboard.color == 1:
                start = time.perf_counter()
                chessboard.transposition_table = {}
                chessboard.counting = 0
                """
                YOU CAN CHANGE THE FOLLOWING BY YOURSELF TO FOLLOWING SETTINGS:
                    -minimax_with_zobrist_hashing_no_pruning(chessboard, depth, maximizingPlayer): this is minimax, with NO
                    PRUNING, but WITH zobrist hashing
                    -minimax_with_pruning(chessboard, depth, -float('inf'), float('inf'), maximizingPlayer):
                    This is the famous alpha-beta-pruning, but WITHOUT the zobrist hashing
                    -minimax_with_zobrist_hashing_and_pruning(chessboard, depth, -float('inf'), float('inf'), maximizingPlayer):
                    this is minimax, PRUNED and WITH the zobrist hashing
                    
                    WARNING: the higher the depth, the better the engine will play, but the longer it takes to generate
                    a move!
                """
                eval, move_white = minimax_with_zobrist_hashing_and_pruning(chessboard, 2, -float('inf'), float('inf'), maximizingPlayer = True)
                # transitioning to endgame if one of the following statements hold
                if eval > 3:
                    if len(chessboard.cells_having_pieces_black) <= 8:
                        chessboard.middlegame = False
                        chessboard.endgame = True

                elif len(chessboard.cells_having_pieces_black) <= len(chessboard.cells_having_pieces_white) < 10:
                    chessboard.middlegame = False
                    chessboard.endgame = True

                elif len(chessboard.cells_having_pieces_white) < 6 and eval > -1:
                    chessboard.middlegame = False
                    chessboard.endgame = True
                end = time.perf_counter()
                print("---------------------------------")
                print("Time to make move:", end-start)
                print("ZOBRIST HASHING OF CURRENT POSITION: ", zobrist_hash(chessboard))
                print("NUMBER OF TRANSPOSITIONS FOUND:", chessboard.counting)
                white_turn(move_white, chessboard)
                print("EVALUATION OF POSITION:", eval_board(chessboard))
                draw_game_state(screen, making_fen(chessboard.current_chess_board)[::-1])

        clock.tick(MAX_FPS)
        p.display.flip()


    # If choosing to play with another person to eachother
    while running_multiplayer:
        # there is initially no possibility to promote
        if not promoting_white and chessboard.color == 1:
            draw_game_state(screen, making_fen(chessboard.current_chess_board))

        # there is initially no possibility to promote
        elif not promoting_black and chessboard.color == -1:
            draw_game_state(screen, making_fen(chessboard.current_chess_board)[::-1])

        for e in p.event.get():
            if e.type == p.QUIT:
                input('the game ended!')
                running_multiplayer = True

            elif e.type == pygame.MOUSEBUTTONDOWN and promoting_white:
                choosing_promotion_piece_black(screen, playerClicks[1][1])
                location = p.mouse.get_pos()  # (x,y) location of the mouse
                col = location[0] // SQ_SIZE
                row = location[1] // SQ_SIZE
                if col == playerClicks[1][1] and row in {0, 1, 2, 3}:
                    ## B represents the bishop
                    row_to_piece = {0: "Q", 1: "R", 2: "B", 3: "N"}
                    piece = row_to_piece[row]
                    promoting_white = False
                    if white_move_player(playerClicks[0], playerClicks[1], chessboard, piece):
                        draw_pieces_by_fen(screen, making_fen(chessboard.current_chess_board))
                        chessboard.color = -1
                        sqSelected = ()
                        playerClicks = []
                        piece = False
                    else:
                        sqSelected = ()
                        playerClicks = []
                        print('you have played an illegal move, please try again')

                else:
                    break

            elif e.type == pygame.MOUSEBUTTONDOWN and chessboard.color == 1:
                location = p.mouse.get_pos()  # (x,y) location of the mouse
                col = location[0] // SQ_SIZE
                row = location[1] // SQ_SIZE
                highlight_square(screen, col, row)

                if sqSelected == (row, col):
                    sqSelected = ()
                    playerClicks = []
                    break
                else:
                    sqSelected = (row, col)
                    playerClicks.append(sqSelected)
                    if len(playerClicks) == 2:
                        if playerClicks[1][0] == 0 and playerClicks[0][0] == 1 and not promoting_white:
                            if chessboard.current_chess_board[playerClicks[0][0]][playerClicks[0][1]] == ("P", 1):
                                choosing_promotion_piece_black(screen, playerClicks[1][1])
                                promoting_white = True
                                break
                        if white_move_player(playerClicks[0], playerClicks[1], chessboard, piece):
                            draw_game_state(screen, making_fen(chessboard.current_chess_board))
                            print("------------------------------------------")
                            print("ZOBRIST HASHING OF CURRENT POSITION: ", zobrist_hash(chessboard))
                            print("EVALUATION OF POSITION:", eval_board(chessboard))
                            chessboard.color = -1
                            sqSelected = ()
                            playerClicks = []
                            piece = False
                        else:
                            sqSelected = ()
                            playerClicks = []
                            print('you have played an illegal move, please try again')



            elif e.type == pygame.MOUSEBUTTONDOWN and promoting_black and chessboard.color==-1:
                choosing_promotion_piece_white(screen, 7-playerClicks[1][1])
                location = p.mouse.get_pos()  # (x,y) location of the mouse
                col = 7-location[0] // SQ_SIZE
                row = 7-location[1] // SQ_SIZE
                if col == playerClicks[1][1] and row in {7, 6, 5, 4}:
                    ## B represents the bishop
                    row_to_piece = {7: "Q", 6: "R", 5: "B", 4: "N"}
                    piece = row_to_piece[row]
                    promoting_black = False
                    if black_move_player(playerClicks[0], playerClicks[1], chessboard, piece):
                        draw_pieces_by_fen(screen, making_fen(chessboard.current_chess_board))
                        chessboard.color = 1
                        sqSelected = ()
                        playerClicks = []
                        piece = False
                    else:
                        sqSelected = ()
                        playerClicks = []
                        print('you have played an illegal move, please try again')

                else:
                    break

            elif e.type == pygame.MOUSEBUTTONDOWN and chessboard.color == -1:
                location = p.mouse.get_pos()  # (x,y) location of the mouse
                col = 7-location[0] // SQ_SIZE
                row = 7-location[1] // SQ_SIZE
                #highlight_square(screen, col, row)

                if sqSelected == (row, col):
                    sqSelected = ()
                    playerClicks = []
                    break
                else:
                    sqSelected = (row, col)
                    playerClicks.append(sqSelected)
                    if len(playerClicks) == 2:
                        if playerClicks[1][0] == 7 and playerClicks[0][0] == 6 and not promoting_black:
                            if chessboard.current_chess_board[playerClicks[0][0]][playerClicks[0][1]] == ("P", -1):
                                choosing_promotion_piece_white(screen, 7-playerClicks[1][1])
                                promoting_black = True
                                break
                        if black_move_player(playerClicks[0], playerClicks[1], chessboard, piece):
                            draw_game_state(screen, making_fen(chessboard.current_chess_board)[::-1])
                            print("------------------------------------------")
                            print("ZOBRIST HASHING OF CURRENT POSITION: ", zobrist_hash(chessboard))
                            print("EVALUATION OF POSITION:", eval_board(chessboard))
                            chessboard.color = 1
                            sqSelected = ()
                            playerClicks = []
                            piece = False
                        else:
                            sqSelected = ()
                            playerClicks = []
                            print('you have played an illegal move, please try again')

            # Game ends if there happens mate or checkmate
            elif chessboard.mate:
                draw_game_state(screen, making_fen(chessboard.current_chess_board))
                input('Checkmate!')
                running_multiplayer = False
            elif chessboard.stalemate:
                draw_game_state(screen, making_fen(chessboard.current_chess_board))
                input('Stalemate!')
                running_multiplayer = False

        clock.tick(MAX_FPS)
        p.display.flip()

def draw_game_state(screen, FEN):
    """
    Drawing current chess board
    """
    draw_board(screen)

    # draw_pieces(screen, gs.current_chess_board)
    draw_pieces_by_fen(screen, FEN)



def draw_menu(screen):
    """
    Drawing menu from which player can choose to play multiplayer or against a bot
    """
    font = pygame.font.Font(None, 36)
    p.draw.rect(screen, "white", p.Rect(0, 0, 512, 196))

    caption = "ENGINE OR MULTIPLAYER?"
    text_surface = font.render(caption, True, "black")
    screen.blit(text_surface, (100, 98))

    p.draw.rect(screen, "gray", p.Rect(0, 196, 256, 316))
    text_surface = font.render("BOT", True, "black")
    screen.blit(text_surface, (100, 354))

    p.draw.rect(screen, "lightblue", p.Rect(256, 196, 256, 316))
    text_surface = font.render("MULTIPLAYER", True, "black")
    screen.blit(text_surface, (300, 354))
    return


def choose_player_color(screen):
    """
    Drawing menu from which player can choose to play black or white against bot
    """
    p.draw.rect(screen, "white", p.Rect(0, 0, 256, 512))
    p.draw.rect(screen, "black", p.Rect(256, 0, 256, 512))
    font = pygame.font.Font(None, 36)
    text_surface = font.render("CHOOSE YOUR COLOR", True, "gray")
    screen.blit(text_surface, (120, 220))


def draw_board(screen):
    """
    drawing chess board, the top left square is always white
    """
    colors = [p.Color("white"), p.Color("gray")]
    for row in range(DIMENSION):
        for col in range(DIMENSION):
            color = colors[((row + col) % 2)]
            p.draw.rect(screen, color, p.Rect(col * SQ_SIZE, row * SQ_SIZE, SQ_SIZE, SQ_SIZE))
    return


def highlight_square(screen, col, row):
    """
    Hightlighting clicked square
    """
    color = p.Color("lightblue")
    p.draw.rect(screen, color, p.Rect(col*SQ_SIZE, row*SQ_SIZE, SQ_SIZE, SQ_SIZE))
    draw_pieces(screen, chessboard.current_chess_board)
    return


def draw_pieces(screen, board):
    """
    drawing the pieces on the board
    """
    for row in range(DIMENSION):
        for col in range(DIMENSION):
            piece = board[row][col]
            if not piece == ("B", 0):
                screen.blit(IMAGES[piece], p.Rect(col * SQ_SIZE, row * SQ_SIZE, SQ_SIZE, SQ_SIZE))


def draw_pieces_by_fen(screen, FEN):
    """
    drawing the pieces on the board based on given FEN
    """
    # example of FEN rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR
    FEN_translation = {'r': ("R", -5), 'n': ("N", -3), 'b': ("L", -3), 'q': ("Q", -9), 'k': ("K", -100), 'p': ("P", -1),
                       'R': ("R", 5), 'N': ("N", 3), 'B': ("L", 3), 'Q': ("Q", 9), 'K': ("K", 100), 'P': ("P", 1)}
    row = 0
    col = 0
    for element in FEN:
        if element == '/':
            col = 0
            row += 1
        else:
            if element in ['1', '2', '3', '4', '5', '6', '7', '8']:
                for i in range(int(element)):
                    col += 1
            else:
                screen.blit(IMAGES[FEN_translation[element]], p.Rect(col * SQ_SIZE, row * SQ_SIZE, SQ_SIZE, SQ_SIZE))
                col += 1

    return



def choosing_promotion_piece_black(screen, col):
    """
    Choosing promotion piece by black
    """
    initial_to_cell = [("Q", 9), ("R", 5), ("L", 3), ("N", 3)]
    row = 0
    for keys in initial_to_cell:
        p.draw.rect(screen, 'gray', p.Rect(col * SQ_SIZE, row * SQ_SIZE, SQ_SIZE, SQ_SIZE))
        screen.blit(IMAGES[keys], p.Rect(col * SQ_SIZE, row * SQ_SIZE, SQ_SIZE, SQ_SIZE))
        row +=1

def choosing_promotion_piece_white(screen, col):
    """
    Choosing promotion piece by white
    """
    initial_to_cell = [("Q", -9), ("R", -5), ("L", -3), ("N", -3)]
    row = 0
    for keys in initial_to_cell:
        p.draw.rect(screen, 'gray', p.Rect(col * SQ_SIZE, row * SQ_SIZE, SQ_SIZE, SQ_SIZE))
        screen.blit(IMAGES[keys], p.Rect(col * SQ_SIZE, row * SQ_SIZE, SQ_SIZE, SQ_SIZE))
        row +=1
if __name__ == '__main__':
    main()
